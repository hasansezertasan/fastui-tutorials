[tool.poetry]
name = "fastui-tutorials"
version = "0.1.0"
description = "I'm exploring the capabilities of FastUI."
authors = ["hasansezertasan <hasansezertasan@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.8"
fastui = "^0.4.0"
fastapi = {extras = ["all"], version = "^0.100.0"}
typer = { extras = ["all"], version = "^0.9.0" }
SQLalchemy = { extras = ["aiosqlite", "asyncio"], version = "2.0.23" }
sqlalchemy-utils = { extras = ["password"], version = "^0.41.1" }

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.27.1"
isort = "^5.13.2"
black = { extras = ["jupyter"], version = "^23.12.1" }
mypy = "^1.8.0"
ruff = "^0.1.9"
pre-commit = "^3.6.0"

[tool.ruff]
# Run `ruff linter` command to see all available linters and their descriptions
target-version = "py311"
line-length = 120
show-fixes = true
extend-include = ["*.ipynb"]
ignore-init-module-imports = true
fix = true

[tool.ruff.lint]
select = [
  "E4",
  "E7",
  "E9",
  "E",  # pycodestyle errors
  "F",  # pyflakes
  "W",  # pycodestyle warnings
  "I",  # isort
  "B9",
  # "B",  # flake8-bugbear
  # "C",  # flake8-comprehensions
  # "UP", # pyupgrade
]

ignore = [
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
  "E501", # line too long, handled by black
  "F401", # imported but unused
  "E402", # module level import not at top of file
  "E712", # comparison to True should be 'if cond is True:' or 'if cond:'
  "F821", # undefined name
  "W191", # indentation contains tabs
  "E101", # indentation contains mixed spaces and tabs
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "tab"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-third-party = ["fastapi", "pydantic", "starlette"]

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
split_on_trailing_comma = true
skip_glob = ["**/alembic/**", "**/migrations/**"]

[tool.black]
line-length = 120
target-version = ['py311']
exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.nox
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | alembic
  )/
)
'''

[tool.mypy]
python_version = "3.11"
show_column_numbers = true
ignore_missing_imports = true
warn_unused_ignores = false
# no_implicit_optional = true
# check_untyped_defs = true
# disallow_untyped_defs = true
# show_error_codes = true
# disallow_untyped_decorators = true
# warn_return_any = true
# warn_unused_configs = true
# strict_optional = true
# warn_redundant_casts = true
# disallow_any_generics = true
# disallow_subclassing_any = true
# disallow_untyped_calls = true
# disallow_incomplete_defs = true


[tool.poe.tasks]
black = "black ."
isort = "isort ."
ruff = "ruff ."
bir = ["black", "isort", "ruff"]
line-count = "pygount --format=summary"
test = "pytest -v -s"
run = "uvicorn main:app --host 0.0.0.0 --port 5000 --workers 10 --reload"
toolbox = { script = "toolbox:app" }
clean = "frenchmaid clean"
requirements = "poetry export -f requirements.txt --output pyproject.txt --without-hashes"
