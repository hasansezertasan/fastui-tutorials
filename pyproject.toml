[tool.poetry]
name = "fastui-tutorials"
version = "0.1.0"
description = "I'm exploring the capabilities of FastUI."
authors = ["Hasan Sezer Taşan <hasansezertasan@gmail.com>"]
license = "MIT"
readme = "README.md"
maintainers = ["Hasan Sezer Taşan <hasansezertasan@gmail.com>"]
package-mode = false

[tool.poetry.dependencies]
python = ">=3.8, <4.0"
fastui = "^0.6.0"
fastapi = { extras = ["all"], version = "^0.110.0" }
flask = "^3.0.3"
litestar = "^2.8.3"
typer = { extras = ["all"], version = "^0.12.3" }
SQLAlchemy = { extras = ["aiosqlite", "asyncio"], version = "2.0.28" }

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.0"
mypy = ">=1.0.0"
ruff = "0.4.6"
codespell = "^2.3.0"
pre-commit = ">=2.20.0, <4.0.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.1.1"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
  "alembic",
  "migrations",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

# Extra
show-fixes = true
extend-include = ["*.ipynb"]
fix = true

[tool.ruff.lint]
# Run `ruff linter` command to see all available linters and their descriptions
select = [
  "F", # Pyflakes
  # "E/W", # pycodestyle
  "E",  # pycodestyle errors
  "E4",
  "E7",
  "E9",
  "W",  # pycodestyle warnings
  "C90", # mccabe
  "I",   # isort
  "N",   # pep8-naming
  # "D", # pydocstyle
  # "UP",  # pyupgrade
  "YTT", # flake8-2020
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "TRIO", # flake8-trio
  # "S", # flake8-bandit
  "BLE", # flake8-blind-except
  "FBT", # flake8-boolean-trap
  "B",   # flake8-bugbear
  "B9",
  "A", # flake8-builtins
  # "COM", # flake8-commas
  "CPY", # flake8-copyright
  "C4",  # flake8-comprehensions
  "C", # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  "DJ",  # flake8-django
  "EM",  # flake8-errmsg
  "EXE", # flake8-executable
  "FA", # flake8-future-annotations
  # "ISC",  # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "G",   # flake8-logging-format
  # "INP",  # flake8-no-pep420
  "PIE",  # flake8-pie
  "T20",  # flake8-print
  "PYI",  # flake8-pyi
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "INT", # flake8-gettext
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "TD",  # flake8-todos
  "FIX", # flake8-fixme
  # "ERA", # eradicate
  "PD",   # pandas-vet
  "PGH",  # pygrep-hooks
  "PL",   # Pylint
  "TRY",  # tryceratops
  "FLY",  # flynt
  "NPY",  # NumPy-specific rules
  "AIR",  # Airflow
  "PERF", # Perflint
  "FURB", # refurb
  "LOG",  # flake8-logging
  "RUF",  # Ruff-specific rules
]
ignore = [
  "E501", # line too long, handled by black
  "F401", # imported but unused
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Extra
preview = true
ignore-init-module-imports = true

[tool.ruff.lint.flake8-copyright]
author = "Hasan Sezer Taşan <hasansezertasan@gmail.com>"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.codespell]
skip = 'poetry.lock'
count = true


[tool.poe.tasks]
# Linting and formatting tasks.
mypy = "mypy ."
ruff-lint = "ruff check ."
ruff-format = "ruff format ."
codespell = "codespell ."
shfmt = "shfmt -l -w scripts/"
lint = ["ruff-lint", "codespell"]
format = ["ruff-format", "shfmt"]
# Analyzing tasks.
line-count = "pygount --format=summary --folders-to-skip=vendor ."
# Shortcuts for common tasks.
run = "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
toolbox = { script = "toolbox.main:app" }
test = "pytest -v -s"
clean = "frenchmaid clean"
